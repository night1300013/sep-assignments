1.Describe an analogy for relating an algorithm that has efficiency O(1) and another algorithm that has O(2^n).
Algorithm that has O(1) are HashMap or access value from an array.
Algorithm that has O(2^n) are Towers of Hanoi or Fibonacci number
2.In plain English, what is the best case scenario for binary search?
It will be O(1) since the first one is the one
3. In plain English, what is the worst-case scenario for binary search?
O(log(n))
4. In plain English, what is the bounded-case scenario for binary search?
1/2(log(n)) = Ө(log(n))
5. Create a graph using the data below. Here's a CSV with the values you'll need.
see logarithm.png
6. What is the limit of the function above as n approaches infinity?
positive infinity
7.What is the Big-O of an algorithm that has the data points above?
O(2^n)
8.Write a Ruby method that takes a number n. This method must print the worst-case number of iterations for linear search to find an item in collections of size one to n. Use it to generate a table of worst-case iterations of collections up to size 10.
linear.rb
9.Create a graph from the output using Google Sheets or other graphing software. Analyze the graph and denote its Big-O somewhere on the graph.
see linear.png
10.What is the Big-O of binary search?
O(log(n))
11.What is the Big-Ω of binary search?
Ω(1)
12.What is the Big-Ө of binary search?
Ө(log(n))
