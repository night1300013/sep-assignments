1.What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.
def goodbye_world(n)
 puts "Goodbye World! #{n}"
end

It will be O(1) since no matter what n is, it will only execute once.

2. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.
def find_largest(collection)
 largest = collection[0]
 collection.length.times do |i|
   if collection[i] >= largest
     largest = collection[i]
   end
 end
 largest
end

It will be O(n). The first line is constant time. Started from the second line is a loop which will go through every single element.
Therefore, the complexity is linear which is O(n).

3. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.
def find_largest(collection)
 largest = collection[0][0]
 collection.length.times do |i|
   subcollection = collection[i]
   subcollection.length.times do |j|
     if subcollection[j] >= largest
       largest = subcollection[j]
     end
   end
 end
 largest
end

It will be O(n). The first line is constant time. For every element, there will only perform once.
Therefore, the big O complexity is O(n).

4. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.
def numbers(n)
 if (n == 0)
   return 0
 elsif (n == 1)
   return 1
 else
   return numbers(n-1) + numbers(n-2)
 end
end

It will be O(2^n). T(n) = T(n-1) + T(n-2) + O(1) = 2T(n-2) + T(n-3) + O(1)
                  T(n-1) = T(n-2) + T(n-3) + O(1) = 2T(n-3) + T(n-4) + O(1)
                  T(n-2) = T(n-3) + T(n-4) + O(1) = 2T(n-4) + T(T-5) + O(1)
                  ....
T(n) = 2^nT(1) + T(1) + O(1)
complexity is O(2^n)

5. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.
def iterative(n)
 num1 = 0
 num2 = 1

 i = 0
 while i < n-1
   tmp = num1 + num2
   num1 = num2
   num2 = tmp
   i+=1
 end

 num2
end

It will be O(n). The while loop will iterative n-1 times plus other constant time.
Therefore, the complexity is O(n)


6.What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.
def sort(collection, from=0, to=nil)
 if to == nil
   # Sort the whole collection, by default
   to = collection.count - 1
 end

 if from >= to
   # Done sorting
   return
 end

 # Take a pivot value, at the far left
 pivot = collection[from]

 # Min and Max pointers
 min = from
 max = to

 # Current free slot
 free = min

 while min < max
   if free == min # Evaluate collection[max]
     if collection[max] <= pivot # Smaller than pivot, must move
       collection[free] = collection[max]
       min += 1
       free = max
     else
       max -= 1
     end
   elsif free == max # Evaluate collection[min]
     if collection[min] >= pivot # Bigger than pivot, must move
       collection[free] = collection[min]
       max -= 1
       free = min
     else
       min += 1
     end
   else
     raise "Inconsistent state"
   end
 end

 collection[free] = pivot

 sort collection, from, free - 1
 sort collection, free + 1, to

 collection
end


It will be O(nlog(n)). It's recursive call, which is n * log(n) of recursive call
